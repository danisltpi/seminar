@book{cormen_introduction_2009,
	edition = {Third edition},
	title = {Introduction to algorithms},
	isbn = {978-0-262-03384-8 978-0-262-53305-8},
	abstract = {I. Foundations. The role of algorithms in computing -- Getting started -- Growth of functions -- Divide-and-conquer -- Probabilistic analysis and randomized algorithms -- {II}. Sorting and order statistics. Heapsort -- Quicksort -- Sorting in linear time -- Medians and order statistics -- {III}. Data structures. Elementary data structures -- Hash tables -- Binary search trees -- Red-black trees -- Augmenting data structures -- {IV}. Advanced design and analysis techniques. Dynamic programming -- Greedy algorithms -- Amortized analysis -- V. Advanced data structures. B-trees -- Fibonacci heaps -- van Emde Boas trees -- Data structures for disjoint sets -- {VI}. Graph algorithms. Elementary graph algorithms -- Minimum spanning trees -- Single-source shortest paths -- All-pairs shortest paths -- Maximun flow -- {VII}. Selected topics. Multithreaded algorithms -- Matrix operations -- Linear programming -- Polynomials and the {FFT} -- Number-theoretic algorithms -- String matching -- Computational geometry -- {NP}-completeness -- Approximation algorithms -- {VIII}. Appendix: Mathematical background. Summations -- Sets, etc. -- Counting and probability -- Matrices},
	pagetotal = {1292},
	publisher = {{MIT} Press},
	author = {Cormen, Thomas H. and Leiserson, Charles Eric and Rivest, Ronald Linn and Stein, Clifford},
	date = {2009},
	file = {Table of Contents PDF:/Users/thien/Zotero/storage/MAUBQ2QG/Cormen et al. - 2009 - Introduction to algorithms.pdf:application/pdf},
}

@article{ft87,
	author = {Fredman, Michael L. and Tarjan, Robert Endre},
	title = {Fibonacci heaps and their uses in improved network optimization algorithms},
	year = {1987},
	issue_date = {July 1987},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {34},
	number = {3},
	issn = {0004-5411},
	abstract = {In this paper we develop a new data structure for implementing heaps (priority queues). Our structure, Fibonacci heaps (abbreviated F-heaps), extends the binomial queues proposed by Vuillemin and studied further by Brown. F-heaps support arbitrary deletion from an n-item heap in O(log n) amortized time and all other standard heap operations in O(1) amortized time. Using F-heaps we are able to obtain improved running times for several network optimization algorithms. In particular, we obtain the following worst-case bounds, where n is the number of vertices and m the number of edges in the problem graph: O(n log n + m) for the single-source shortest path problem with nonnegative edge lengths, improved from O(mlog(m/n+2)n);  O(n2log n + nm) for the all-pairs shortest path problem, improved from O(nm log(m/n+2)n);  O(n2log n + nm) for the assignment problem (weighted bipartite matching), improved from O(nmlog(m/n+2)n);  O(mβ(m, n)) for the minimum spanning tree problem, improved from O(mlog log(m/n+2)n); where β(m, n) = min {i | log(i)n ≤ m/n}. Note that β(m, n) ≤ log*n if m ≥ n.  Of these results, the improved bound for minimum spanning trees is the most striking, although all the results give asymptotic improvements for graphs of appropriate densities.},
	journal = {J. ACM},
	month = jul,
	pages = {596–615},
	numpages = {20}
}